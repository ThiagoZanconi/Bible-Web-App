@inherits LayoutComponentBase
@using System.IdentityModel.Tokens.Jwt;
@using BlazorApp.Model
@using Layout.Components
@inject TokenState TokenState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

<div class="page">

    @if(expand){
        <nav class="d-flex flex-column flex-shrink-0 p-2 text-white bg-dark w-25-md sidebar">
            <div class="@NavBarClasses" id="navbarNavDropdown">
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="ToggleNav"></button>
                </div>
                <NavMenu />
                <hr>
                <div class="mt-3 mx-auto">
                    @if(isLoggedIn){
                        <div> Bienvenido, @userName</div>
                        <BlazorApp.Components.Layout.Components.LoggedComponent OnClickCallback=Logout/>
                    }
                    else{
                        <BlazorApp.Components.Layout.Components.NotLoggedComponent/>
                    }
                </div>
            </div>
        </nav>
    }
    <main>
        <div class="top-row d-flex justify-content-between px-4">
                <div class="navbar">
                    @if(!expand){
                        <button class="navbar-toggler" @onclick="ToggleNav">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                    }
                </div>
            <a href="http://localhost:5120/swagger/index.html" target="_blank">API Doc</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code{
    private bool expand;
    private string NavBarClasses => expand ? "navbar-collapse" : "collapse navbar-collapse";
    private bool isLoggedIn;
    private string userName = "";

    private void ToggleNav(){
        expand = !expand;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoggedIn = await LoggedIn();
            await JS.InvokeVoidAsync("console.log", "Componente renderizado");
        }
        await SetUserName();
    }
    private async Task<bool> LoggedIn()
    {
        var token = await localStorage.GetItemAsync<string>("jwtToken");
        return !string.IsNullOrEmpty(token);
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("jwtToken");
        isLoggedIn = false;
    }

    private async Task SetUserName()
    {
        var token = await localStorage.GetItemAsync<string>("jwtToken");

        if (!string.IsNullOrEmpty(token)){
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token); // Decodificar el token
            // Obtener el nombre del usuario (puede ser "name" o "unique_name")
            var nameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name");
            userName = nameClaim?.Value ?? "";
        }
    }

    protected override void OnInitialized()
    {
        TokenState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        TokenState.OnChange -= StateHasChanged;
    }
}