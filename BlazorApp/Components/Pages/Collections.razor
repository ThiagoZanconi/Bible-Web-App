@page "/collections"
@rendermode InteractiveServer
@using BlazorApp.Components.Pages.CollectionsComponents
@using BlazorApp.Model
@using BlazorApp.model
@using System.Net.Http.Headers
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (selectedComponent is not null)
{
        <DynamicComponent Type="selectedComponent.Type"
            Parameters="selectedComponent.Parameters" />
}

<DynamicComponent Type="renderedCollections.Type"
            Parameters="renderedCollections.Parameters" />

@code{
    [Inject] 
    private HttpClient Http { get; set; } = default!;
    private List<Collection>? collections;
    private ComponentMetadata? selectedComponent;
    private ComponentMetadata renderedCollections {get;set;} = new ComponentMetadata()
            {
                Type = typeof(CollectionsNotFound),
                Name = "Log in to see or create collections"
            };
    private Dictionary<string, ComponentMetadata> Components =>
        new()
        {
            [nameof(CreateCollectionButton)] = new ComponentMetadata()
            {
                Type = typeof(CreateCollectionButton),
                Name = "Create Collection Button",
                Parameters = { [nameof(CreateCollectionButton.OnClickCallback)] =
                    EventCallback.Factory.Create<Type>(this, SetComponent) }
            },
            [nameof(CreatingCollectionComponent)] = new ComponentMetadata()
            {
                Type = typeof(CreatingCollectionComponent),
                Name = "Creating Collection",
                Parameters = { [nameof(CreatingCollectionComponent.OnClickCallback)] =
                    EventCallback.Factory.Create<Type>(this, SetComponent) }
            }
        };
    private void SetComponent(Type e)
    {
        string key = e.Name; // Obtener la clave correcta del diccionario
        if (Components.TryGetValue(key, out var metadata))
        {
            selectedComponent = metadata;
        }
        else
        {
            selectedComponent = null; // O manejar el error de otra manera
        }
    }
    protected override void OnInitialized()
    {
        selectedComponent ??= Components.Values.FirstOrDefault();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await FetchCollections();
    }

    private async Task FetchCollections(){
        var token = await localStorage.GetItemAsync<string>("jwtToken");
        if(token!=null){
            var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5120/api/collection");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                collections = await response.Content.ReadFromJsonAsync<List<Collection>>();
                if(collections!=null){
                    renderedCollections = new ComponentMetadata()
                    {
                        Type = typeof(UserCollections),
                        Name = "User Collections",
                        Parameters = { [nameof(UserCollections.collections)] = collections }
                    };
                }
            }
            else
            {
                // Manejo del error (por ejemplo, si el token es inv√°lido)
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        StateHasChanged(); 
    }
}