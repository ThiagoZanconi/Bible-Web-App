@page "/collections"
@rendermode InteractiveServer
@using BlazorApp.Components.Pages.CollectionsComponents
@using BlazorApp.Model
@using BlazorApp.model
@using System.Net.Http.Headers
@inject TokenState TokenState
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="content">
    @if (selectedComponent is not null)
    {
            <DynamicComponent Type="selectedComponent.Type"
                Parameters="selectedComponent.Parameters" />
    }

    <DynamicComponent Type="renderedCollections.Type"
                Parameters="renderedCollections.Parameters" />
</div>
@code{
    [Inject] 
    private HttpClient Http { get; set; } = default!;
    private string? token;
    private List<Collection>? collections;
    private ComponentMetadata? selectedComponent;
    private ComponentMetadata renderedCollections {get;set;} = new ComponentMetadata()
            {
                Type = typeof(CollectionsNotFound),
                Name = "Log in to see or create collections"
            };
    private Dictionary<string, ComponentMetadata> Components = new();
    private async void SetComponent(Type e)
    {
        string key = e.Name;
        if (Components.TryGetValue(key, out var metadata))
        {
            selectedComponent = metadata;
        }
        else
        {
            selectedComponent = null;
        }
        await FetchCollections();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            token = await localStorage.GetItemAsync<string>("jwtToken");
            bool isTokenValid = !string.IsNullOrEmpty(token);
            InitCreateCollectionButtonComponent(isTokenValid);
            InitCreatingCollectionComponent();
            selectedComponent = Components[nameof(CreateCollectionButton)];
            await FetchCollections();
        }
    }

    private void InitCreateCollectionButtonComponent(bool loggedIn){
        Components[nameof(CreateCollectionButton)] = new ComponentMetadata()
            {
                Type = typeof(CreateCollectionButton),
                Name = "Create Collection Button",
                Parameters = { 
                    [nameof(CreateCollectionButton.OnClickCallback)] = EventCallback.Factory.Create<Type>(this, SetComponent),
                    [nameof(CreateCollectionButton.LoggedIn)] = loggedIn
                }
            };
    }

    private void InitCreatingCollectionComponent(){
         Components[nameof(CreatingCollectionComponent)] = new ComponentMetadata()
            {
                Type = typeof(CreatingCollectionComponent),
                Name = "Creating Collection",
                Parameters = 
                { 
                    [nameof(CreatingCollectionComponent.OnClickCallback)] = EventCallback.Factory.Create<Type>(this, SetComponent)
                }
            };
    }

    private async Task FetchCollections(){
        var token = await localStorage.GetItemAsync<string>("jwtToken");
        if(token!=null){
            var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5120/api/collection");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                collections = await response.Content.ReadFromJsonAsync<List<Collection>>();
                if(collections!=null){
                    renderedCollections = new ComponentMetadata()
                    {
                        Type = typeof(UserCollections),
                        Name = "User Collections",
                        Parameters = { [nameof(UserCollections.collections)] = collections }
                    };
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        StateHasChanged(); 
    }

    private void LoggedOut(string? token){
        if(token==null){
            InitCreateCollectionButtonComponent(false);
            selectedComponent = Components[nameof(CreateCollectionButton)];
            Console.WriteLine("Logged Out"); 
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        TokenState.OnChange += ()=> LoggedOut(TokenState.Token);
    }
    public void Dispose()
    {
        TokenState.OnChange -= ()=> LoggedOut(TokenState.Token);
    }
}