@page "/"
@using BlazorApp.Model
@using BlazorApp.Components.Pages.HomeComponents
@rendermode InteractiveServer
@attribute [StreamRendering]
@implements IAsyncDisposable
@inject IJSRuntime JS
<PageTitle>Home</PageTitle>

<h1 class="text-primary text-center">BIBLE</h1>
<div class="px-8" @onclick="CloseDropdown">
    @if (books is null)
    {
        <p class="text-center">Loading...</p>
    }
    else
    {
        <ul class="list-unstyled">
            @foreach (var book in books)
            {
                <li>
                    <div class="container text-center mt-1 w-50">
                        <BookButton text=@book.name OnClick="() => FetchBook(book.id)" />
                    </div>
                    @if (expandedBook.Equals(book.id) && chapters!=null)
                    {
                        <div class="container mt-2">
                            <div class="row">
                                @for (int i = 1; i <= @chapters.Count; i++)
                                {
                                    int chapterIndex = i;
                                    <div class="col-2 p-1">
                                        <button @onclick="() => FetchChapter(book.id,chapterIndex)" class="btn btn-outline-secondary w-100">@i</button>
                                    </div>
                                    @if (expandedChapter == i && verses!=null)
                                    {
                                        <div id="prev_button" class="container w-full text-center mt-2 mb-2">
                                            <button @onclick="() => SetPrevChapter(book.id,chapterIndex)" class="btn btn-outline-secondary w-25 h-full"> Prev </button>
                                        </div>

                                        <VersesComponent verses="verses" @ref="versesComponent"/>

                                        <div id="next_button" class="container w-full text-center mt-2 mb-2">
                                            <button @onclick="() => SetNextChapter(book.id,chapterIndex)" class="btn btn-outline-secondary w-25 h-full"> Next </button>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                </li>
            }
        </ul>
    }
</div>
@code{
    private IJSObjectReference? module;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Components/Pages/Home.razor.js");
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
    private async Task ScrollToPrevButton(){
        if(module!=null){
            await module.InvokeVoidAsync("scrollToPrevButton");
        }
    } 

    [Inject] 
    private HttpClient Http { get; set; } = default!;
    private List<Book>? books;
    private List<Chapter>? chapters;
    private List<Verse>? verses;
    private VersesComponent? versesComponent;
    private string expandedBook = "";
    private int expandedChapter = 0;
    protected override async Task OnInitializedAsync()
    {
        await FetchBible();
    }
    private void SetBook(string book_id)
    {
        expandedChapter = 0;
        if (expandedBook.Equals(book_id))
            expandedBook = "";
        else
            expandedBook = book_id;
    }
    private void SetChapter(int index)
    {
        if (expandedChapter == index)
            expandedChapter = 0;
        else
            expandedChapter = index;
    }
    private async Task FetchBible(){
        try
        {
            books = await Http.GetFromJsonAsync<List<Book>>("http://localhost:5120/api/bible");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }
    private async Task FetchBook(string book_id){
        try
        {
            chapters = await Http.GetFromJsonAsync<List<Chapter>>("http://localhost:5120/api/bible/"+book_id);
            SetBook(book_id); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }
    private async Task FetchChapter(string book_id, int chapter){
        Console.WriteLine("Fetch Verses");
        try
        {
            Console.WriteLine("http://localhost:5120/api/bible/"+book_id+"/"+chapter);
            verses = await Http.GetFromJsonAsync<List<Verse>>("http://localhost:5120/api/bible/"+book_id+"/"+chapter);
            SetChapter(chapter);
            await ScrollToPrevButton();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }
    private async Task SetPrevChapter(string current_book_id, int current_chapter){
        try{
            if(current_chapter > 1){
            await FetchChapter(current_book_id, current_chapter-1);
            }
            else{
                string book_id = GetPrevBook(current_book_id);
                await FetchBook(book_id);
                await FetchChapter(book_id, chapters!.Count);
            }
        }
        catch(ArgumentOutOfRangeException e){
            Console.WriteLine(e.Message);
        } 
    }
    private string GetPrevBook(string book_id){
        int current = books!.FindIndex(b => b.id == book_id);
        return books[current - 1].id;
    }
    private async Task SetNextChapter(string current_book_id, int current_chapter){
        try{
            if(current_chapter < chapters!.Count){
            await FetchChapter(current_book_id, current_chapter+1);
            }
            else{
                string book_id = GetNextBook(current_book_id);
                await FetchBook(book_id);
                await FetchChapter(book_id, 1);
            }
        }
        catch(ArgumentOutOfRangeException e){
            Console.WriteLine(e.Message);
        }
    }
    private string GetNextBook(string book_id){
        int current = books!.FindIndex(b => b.id == book_id);
        return books[current + 1].id;
    }
    private void CloseDropdown(){
        versesComponent?.CloseDropdown();
    }
}