@using BlazorApp.Model
@using System.Net.Http.Headers
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="container">
    <div class="row row-cols row-cols-2-md row-cols-3-lg p-3 g-3">
        @foreach (var collection in collections)
        {
            <div class="col d-flex justify-content-between">
                <button class="border p-5 rounded-3 underline-on-hover w-100 h-100" @onclick="()=>NavigateToCollection(collection.name)">
                    @collection.name
                </button>
                <div class="d-flex gap-2">
                    <button class="btn btn-danger-hover d-flex align-items-center p-3 m-3" @onclick="() => DeleteCollection(collection)">
                        <img src="images/trash-can-icon.svg" width="16" height="16" alt="Eliminar">
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade @ModalShow" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content modal-dialog-centered">
      <div class="modal-header mx-auto">
        <h5 class="modal-title text-danger text-center" id="exampleModalLabel">Confirm Delete?</h5>
      </div>
      <div class="modal-footer d-flex justify-content-around">
        <button type="button" class="btn btn-secondary" @onclick="ToggleModal">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="ConfirmDelete">Confirm</button>
      </div>
    </div>
  </div>
</div>

@code{

    [Inject] 
    private HttpClient Http { get; set; } = default!;

    [Parameter]
    public List<Collection> collections { get; set; } = new();
    private bool show;
    private string ModalShow => show ? "show d-block" : "";
    private string collectionToDelete = String.Empty;

    private void ToggleModal(){
        show = !show;
        StateHasChanged();
    }
    private void DeleteCollection(Collection collection)
    {
        collectionToDelete = collection.name;
        ToggleModal();
        StateHasChanged();
    }
    private async void ConfirmDelete()
    {
        bool deletedCollection = await DeleteCollectionRequest(collectionToDelete);
        if(deletedCollection){
            collections.Remove(collections.FirstOrDefault(c => c.name == collectionToDelete)!);
            StateHasChanged();
        }
        ToggleModal();
    }

    private async Task<bool> DeleteCollectionRequest(string name){
        var token = await localStorage.GetItemAsync<string>("jwtToken");
        if(token!=null){
            var request = new HttpRequestMessage(HttpMethod.Delete, "http://localhost:5120/api/collection/"+name);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Coleccion eliminada exitosamente");
                return true;
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        StateHasChanged();
        return false;
    }

    private void NavigateToCollection(string name){
        Navigation.NavigateTo("/collection/"+name);
    }
}