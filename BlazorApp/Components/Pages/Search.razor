@page "/search"
@using BlazorApp.Components.Services
@using BlazorApp.Model
@rendermode InteractiveServer
@inject IBibleApiService BibleApiService

<div class="px-8" @onclick="CloseDropdown"> 
    <div >
        <div class="w-100 mx-auto">
            <div class="dropdown text-center">
                <button class="btn btn-secondary dropdown-toggle w-25" type="button" id="dropdownMenuButton" aria-haspopup="true" aria-expanded="true" @onclick=ToggleDropdown>
                    @selectedBook
                </button>
                <div class="@NavBarClasses w-100" aria-labelledby="dropdownMenuButton" style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 5px;">
                    @foreach(var book in OrderedBooks){
                        <div class="dropdown-item w-100 text-center" @onclick="() => SetSelected(book)">@book</div>
                    }
                </div>
            </div>
        </div>

        <div class="text-center mt-3" >     
            <div class="d-flex justify-content-around w-100">
                <InputText type="text" class="form-control w-75" placeholder="Keyword" @bind-Value="keyword" @onkeydown="EnterPressed" />
                <button class="btn btn-primary" @onclick="() => AddKeyword(keyword)">
                    Add
                </button>
            </div>

            <div class="mt-2 px-2">
                <div class="row row-cols row-cols-2-md row-cols-3-lg p-3 g-3">
                    @foreach(var key in keywords){
                        <div class="col d-flex justify-content-start">
                            <div class="d-flex mr-2 my-auto">
                                @key
                            </div>
                            <button class="btn btn-danger-hover d-flex align-items-center" @onclick="() => RemoveKeyword(key)">
                                <img src="images/trash-can-icon.svg" width="16" height="16" alt="Eliminar">
                            </button>
                        </div>
                    }
                </div>
            </div>

            <div class="w-50 mx-auto mt-3">
                <button class="w-100 btn btn-primary" @onclick="SearchVerses">
                    Search Verses
                </button>
            </div>
            @if(verses!=null){
                <VersesComponent verses="verses" @ref="versesComponent"/>
            }
        </div>
    </div>
</div>
@code{
    [Inject]
    private HttpClient Http { get; set; } = default!;
    public static readonly string[] OrderedBooks =
    {
        "ANY", "GEN", "EXO", "LEV", "NUM", "DEU", 
        "JOS", "JDG", "RUT", "1SA", "2SA",
        "1KI", "2KI", "1CH", "2CH", "EZR",
        "NEH", "EST", "JOB", "PSA", "PRO",
        "ECC", "SNG", "ISA", "JER", "LAM",
        "EZK", "DAN", "HOS", "JOL", "AMO",
        "OBA", "JON", "MIC", "NAM", "HAB",
        "ZEP", "HAG", "ZEC", "MAL",
        "MAT", "MRK", "LUK", "JHN", "ACT",
        "ROM", "1CO", "2CO", "GAL", "EPH",
        "PHP", "COL", "1TH", "2TH",
        "1TI", "2TI", "TIT", "PHM", "HEB",
        "JAS", "1PE", "2PE", "1JN", "2JN",
        "3JN", "JUD", "REV"
    };
    private string selectedBook = "Book";
    private string keyword = String.Empty;
    private List<string> keywords = new();
    private List<Verse>? verses;
    private VersesComponent? versesComponent;
    private bool show;
    private string NavBarClasses => show ? "dropdown-menu show d-grid" : "dropdown-menu d-none";
    private void ToggleDropdown(){
        show = !show;
    }
    private void SetSelected(string book){
        selectedBook = book;
        ToggleDropdown();
    }
    private async void SearchVerses(){
        string keywordsString = string.Join(", ", keywords);
        await FetchVerses(keywordsString);
        StateHasChanged();
    }
    private async Task FetchVerses(string keywords){
        if(selectedBook == "Book" || selectedBook == "ANY")
        {
            verses = await BibleApiService.GetVersesByKeywordsAsync(keywords);
        }
        else{
            verses = await BibleApiService.GetVersesInBookByKeywordsAsync(selectedBook, keywords);
        }
    }
    private void EnterPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddKeyword(keyword);
        }
    }
    private void AddKeyword(string key){
        if(keyword!=""){
            keywords.Add(key);
            keyword="";
        }
        StateHasChanged();
    }
    private void RemoveKeyword(string key){
        keywords.Remove(key);
    }
    private void CloseDropdown(){
        versesComponent?.CloseDropdown();
    }
}