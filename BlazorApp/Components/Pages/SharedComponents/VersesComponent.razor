@using BlazorApp.Components.Services
@using BlazorApp.Model
@inject IBibleApiService BibleApiService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="px-5">
    @foreach(string chapter in ChapterVerseDictionary.Keys){
        <pre class="fs-5 fw-light text-center bg-light p-3 rounded shadow w-full m-0" style="white-space: pre-wrap; word-wrap: break-word;">
            @chapter
        </pre>
        <hr>
        @foreach(Verse verse in ChapterVerseDictionary[chapter]){
            <pre @onclick:stopPropagation class="underline-on-hover fs-5 fw-light text-start bg-light p-3 rounded shadow w-full m-0" style="white-space: pre-wrap; word-wrap: break-word;" @onclick="(e) => VerseSelected(verse,e)">
                @PrintVerse(verse)
            </pre>
        }   
    }
</div>
@if (IsDropdownVisible && IsLoggedIn)
    {
        <ul class="dropdown-menu-custom" style="@DropdownStyle">
            @foreach(Collection collection in collections){
                <li @onclick="() => SaveVerseToCollection(collection.name)">@collection.name</li>
            }
            <hr>
            <li @onclick="() => CreateCollection()">New Collection</li>
        </ul>
    }

@code{
    [Parameter]
    public List<Verse> verses { get; set; } = new();
    private Dictionary<string, List<Verse>> ChapterVerseDictionary = new Dictionary<string, List<Verse>>();
    private Verse selectedVerse = default!;
    private bool IsDropdownVisible = false;
    private bool IsLoggedIn = false;
    private string DropdownStyle = "";
    private List<Collection> collections = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            SetChapters();
            await SetSession();
            StateHasChanged();
        }
    }
    private void SetChapters(){
        foreach(var verse in verses){
            var chapter = verse.book+" "+verse.chapter;
            if (!ChapterVerseDictionary.ContainsKey(chapter))
            {
                ChapterVerseDictionary[chapter] = new List<Verse>();
            }
            ChapterVerseDictionary[chapter].Add(verse);
        }
    }
    private async Task SetSession(){
        var token = await localStorage.GetItemAsync<string>("jwtToken");
        if(token!=null){
            IsLoggedIn = true;
            collections = await BibleApiService.GetCollectionsAsync(token) ?? new();
        }
    }

    private void VerseSelected(Verse verse, MouseEventArgs e){
        selectedVerse = verse;
        ShowDropdown(e);
    }
    private void ShowDropdown(MouseEventArgs e)
    {
        DropdownStyle = $"top: {e.PageY}px; left: {e.PageX}px;";
        IsDropdownVisible = true;
    }
    public void CloseDropdown()
    {
        IsDropdownVisible = false;
        StateHasChanged();
    }
    private string PrintVerse(Verse verse){
        string text="";
        text+=ToSuperscript(verse.verse)+" ";
        text+=verse.text;
        return text;
    }
    private static string ToSuperscript(int number)
    {
        var superscriptDigits = new Dictionary<char, char>
        {
            { '0', '⁰' }, { '1', '¹' }, { '2', '²' }, { '3', '³' }, { '4', '⁴' },
            { '5', '⁵' }, { '6', '⁶' }, { '7', '⁷' }, { '8', '⁸' }, { '9', '⁹' }
        };

        return new string(number.ToString().Select(d => superscriptDigits[d]).ToArray());
    }
    private async void SaveVerseToCollection(string name){
        var token = await localStorage.GetItemAsync<string>("jwtToken");
        if(token!=null){
            await BibleApiService.PostVerseToCollectionAsync(token, name, selectedVerse);
        }
    }
    private void CreateCollection(){
        Console.WriteLine("Create Collection");
    }

}