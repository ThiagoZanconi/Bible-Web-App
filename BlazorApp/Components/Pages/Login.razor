@page "/login"
@using BlazorApp.Model
@using BlazorApp.model
@using System.IdentityModel.Tokens.Jwt;
@inject TokenState TokenState
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm Model="@user" OnValidSubmit="@login" class="needs-validation">
    <div class="d-flex justify-content-center p-3">
        
            <div class="w-100">
                <DataAnnotationsValidator />
                <div class="mb-3 row p-3">
                    <label class="col-sm-2 col-form-label" >Email</label>
                    <div class="col-sm-10">
                        <InputText type="text" class="form-control" required placeholder="Enter email" @bind-Value="user.Email" />
                    </div>
                </div>
                <div class="mb-3 row p-3">
                    <label class="col-sm-2 col-form-label" aria-required>Password</label>
                    <div class="col-sm-10">
                        <InputText type="password" class="form-control" id="inputPassword" required  placeholder="Password" @bind-Value="user.Password"/>
                    </div>
                </div>
                <div class="mb-3 row">
                    <button type="submit" class="btn btn-primary mx-auto" style="width:120px;">Login</button>
                </div>
                @if(statusCode == 404){
                    <div class="mb-3 row">
                        <label class="text-danger text-center" aria-required>Error: Invalid Credentials</label>
                    </div>
                }
                @if(statusCode == 500){
                    <div class="mb-3 row">
                        <label class="text-danger text-center" aria-required>Auth Error</label>
                    </div>
                }
            </div>

    </div>
</EditForm>

@code{
    [Inject] 
    private HttpClient Http { get; set; } = default!;
    private UserLogin user = new();
    private int statusCode = 200;
    private async Task login()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5120/api/login", user);
            
            if(response.IsSuccessStatusCode){
                statusCode = 200;
                var body = await response.Content.ReadFromJsonAsync<Token>();
                if(body!=null){
                    var token = body.token;
                    await SaveToken(token);
                }      
            }
            else
                if(response.StatusCode == System.Net.HttpStatusCode.NotFound){
                    statusCode = 404;
                }
                else{
                    statusCode = 500;
                }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }
    private async Task SaveToken(string jwt)
    {
        await localStorage.SetItemAsync("jwtToken", jwt);
        TokenState.SetToken(jwt);
    }
      
}