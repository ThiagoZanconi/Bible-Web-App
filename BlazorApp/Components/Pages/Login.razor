@page "/login"
@using BlazorApp.Components.Services
@using System.IdentityModel.Tokens.Jwt
@using BlazorApp.Model
@using BlazorApp.model
@rendermode InteractiveServer
@inject TokenState TokenState
@inject NavigationManager Navigation
@inject IBibleApiService BibleApiService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm Model="@user" OnValidSubmit="@login" class="needs-validation">
    <div class="d-flex justify-content-center p-3">
        
            <div class="w-100">
                <DataAnnotationsValidator />
                <div class="mb-3 row p-3">
                    <label class="col-sm-2 col-form-label" >Email</label>
                    <div class="col-sm-10">
                        <InputText type="text" class="form-control" required placeholder="Enter email" @bind-Value="user.Email" />
                    </div>
                </div>
                <div class="mb-3 row p-3">
                    <label class="col-sm-2 col-form-label" aria-required>Password</label>
                    <div class="col-sm-10">
                        <InputText type="password" class="form-control" id="inputPassword" required  placeholder="Password" @bind-Value="user.Password"/>
                    </div>
                </div>
                <div class="mb-3 row">
                    <button type="submit" class="btn btn-primary mx-auto" style="width:120px;">Login</button>
                </div>
                @if(!loginSuccesful){
                    <div class="mb-3 row">
                        <label class="text-danger text-center" aria-required>Error: Invalid Credentials</label>
                    </div>
                }
            </div>

    </div>
</EditForm>

@code{
    private UserLogin user = new();
    private bool loginSuccesful = true;
    private async Task login()
    {
        string? token = await BibleApiService.PostLogin(user);
        if(token!=null){
            await SaveToken(token);
            Navigation.NavigateTo("");
        }
        else{
            loginSuccesful = false;
        }
    }
    private async Task SaveToken(string jwt)
    {
        await localStorage.SetItemAsync("jwtToken", jwt);
        TokenState.SetToken(jwt);
    }
      
}